//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <UIKit/UIView.h>

#import "SCEventAnnouncing-Protocol.h"

@class AVPlayer, FBKVOController, NSDate, NSDictionary, NSString, NSTimer, SCEventListenerAnnouncer, SCNetworkVideo, UIImageView;
@protocol SCLegacyItemDownloaderHandling, SCLegacyItemDownloading;

@interface SCNetworkVideoView : UIView <SCEventAnnouncing>
{
    SCEventListenerAnnouncer *_eventAnnouncer;
    id <SCLegacyItemDownloaderHandling> _downloadHandler;
    UIImageView *_overlayView;
    _Bool _isPlayingBackward;
    _Bool _shouldAutoplayWhenLoaded;
    _Bool _shouldMute;
    _Bool _shouldFadeAnimateWhenReadyToPlay;
    id <SCLegacyItemDownloading> _videoDownloader;
    NSString *_loggingIdentifier;
    SCNetworkVideo *_networkVideo;
    AVPlayer *_player;
    long long _playbackStatus;
    long long _loopType;
    FBKVOController *_kVOObserver;
    NSDate *_computedTimeToLoadFirstFrame;
    NSDate *_computedTimeStuckInEachStalledState;
    NSTimer *_stallIntervalTimerToPauseVideo;
    double _totalStallDurationPerSession;
    double _timeToRenderFirstFrameInSeconds;
    unsigned long long _currentLoopCount;
    double _maxLoopDurationSeconds;
    unsigned long long _maxLoopCount;
    double _minimumStallIntervalToPausePlayback;
    NSDictionary *_animationKeys;
}

+ (Class)layerClass;
+ (id)announcerIdentifier;
@property(retain, nonatomic) NSDictionary *animationKeys; // @synthesize animationKeys=_animationKeys;
@property(nonatomic) _Bool shouldFadeAnimateWhenReadyToPlay; // @synthesize shouldFadeAnimateWhenReadyToPlay=_shouldFadeAnimateWhenReadyToPlay;
@property(nonatomic) double minimumStallIntervalToPausePlayback; // @synthesize minimumStallIntervalToPausePlayback=_minimumStallIntervalToPausePlayback;
@property(nonatomic) _Bool shouldMute; // @synthesize shouldMute=_shouldMute;
@property(nonatomic) _Bool shouldAutoplayWhenLoaded; // @synthesize shouldAutoplayWhenLoaded=_shouldAutoplayWhenLoaded;
@property(nonatomic) unsigned long long maxLoopCount; // @synthesize maxLoopCount=_maxLoopCount;
@property(nonatomic) double maxLoopDurationSeconds; // @synthesize maxLoopDurationSeconds=_maxLoopDurationSeconds;
@property(nonatomic) unsigned long long currentLoopCount; // @synthesize currentLoopCount=_currentLoopCount;
@property(nonatomic) double timeToRenderFirstFrameInSeconds; // @synthesize timeToRenderFirstFrameInSeconds=_timeToRenderFirstFrameInSeconds;
@property(nonatomic) double totalStallDurationPerSession; // @synthesize totalStallDurationPerSession=_totalStallDurationPerSession;
@property(retain, nonatomic) NSTimer *stallIntervalTimerToPauseVideo; // @synthesize stallIntervalTimerToPauseVideo=_stallIntervalTimerToPauseVideo;
@property(retain, nonatomic) NSDate *computedTimeStuckInEachStalledState; // @synthesize computedTimeStuckInEachStalledState=_computedTimeStuckInEachStalledState;
@property(retain, nonatomic) NSDate *computedTimeToLoadFirstFrame; // @synthesize computedTimeToLoadFirstFrame=_computedTimeToLoadFirstFrame;
@property(retain, nonatomic) FBKVOController *kVOObserver; // @synthesize kVOObserver=_kVOObserver;
@property long long loopType; // @synthesize loopType=_loopType;
@property long long playbackStatus; // @synthesize playbackStatus=_playbackStatus;
@property(retain, nonatomic) AVPlayer *player; // @synthesize player=_player;
@property(retain, nonatomic) SCNetworkVideo *networkVideo; // @synthesize networkVideo=_networkVideo;
@property(retain, nonatomic) NSString *loggingIdentifier; // @synthesize loggingIdentifier=_loggingIdentifier;
@property(retain, nonatomic) id <SCLegacyItemDownloading> videoDownloader; // @synthesize videoDownloader=_videoDownloader;
- (void).cxx_destruct;
- (void)_bouncePlayerItem:(id)arg1;
- (void)_loopPlayerItem:(id)arg1;
- (void)_loopCurrentPlayerItemFromBeginning;
- (void)_announceEvent:(id)arg1 extraData:(id)arg2;
- (void)_resetAllTrackedMetrics;
- (void)_invalidateStallIntervalTimerIfNeeded;
- (void)_setupPlayerWithItem:(id)arg1 overlay:(id)arg2 requestedNetworkVideo:(id)arg3;
- (void)_didLoadRequestedNetworkVideo:(id)arg1 withResult:(id)arg2;
- (void)_loadNetworkVideo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_showOverlayIfNeeded;
- (void)_setOverlay:(id)arg1;
- (void)_reset;
- (id)downloaderHandler;
- (void)setNetworkVideo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1 loopType:(long long)arg2;
- (void)dealloc;
- (void)didTriggerEventWithEventName:(id)arg1 announcerIdentifier:(id)arg2 extraData:(id)arg3;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
- (void)_reportSuccessPlaybackWithoutStalls;
- (void)_reportVideoFailedToPlay:(id)arg1;
- (void)_reportVideoFailedToLoad;
- (void)_reportVideoPlaybackDidStop;
- (void)_reportVideoPlaybackDidPause;
- (void)_reportVideoDidStartPlaying;
- (void)_reportVideoPlaybackWillUnPause;
- (void)_reportVideoWillStartPlaying;
- (void)_reportVideoDownloadError;
- (void)_reportTimeForFirstFrameIfNeeded;
- (void)_reportTimeStuckInStalledState;
- (void)_reportErrorLogsPerSession:(id)arg1;
- (void)_reportTotalWeightedBitRateInBitsPerSecond:(double)arg1;
- (void)_reportTotalCountOfStallsPerSession:(unsigned long long)arg1;
- (void)_reportPercentageOfTimeSpentStuckInStalledState:(double)arg1;
- (void)_reportTotalDurationVideoStalledPerSession:(double)arg1;
- (void)_reportTotalDurationWatchedPerSession:(double)arg1;
- (void)_reportTotalDurationOfSession:(double)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_addKVOObserversForCurrentPlayerItem;
- (void)_addNotificationObserversForPlayerItem;
- (void)_removeNotificationObserversForPlayerItem;
- (void)_playerItemDidStall:(id)arg1;
- (void)_playerItemDidReachEnd:(id)arg1;
- (void)stop;
- (void)pause;
- (_Bool)play;
- (_Bool)_canPlay;
- (void)shouldStopPlaybackAfterLoopCount:(unsigned long long)arg1;
- (void)shouldStopPlaybackAfterLoopDuration:(double)arg1;
- (void)shouldMute:(_Bool)arg1;
- (void)shouldAutoplayWhenLoaded:(_Bool)arg1;
- (void)shouldPausePlaybackIfStalledForMinimumInterval:(double)arg1;
- (void)stopAndReportPlaybackSessionMetrics;
- (void)shouldFadeAnimateWhenReadyToPlay:(_Bool)arg1 customAnimationKeys:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

