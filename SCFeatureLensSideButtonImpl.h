//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCFeature.h"

#import "SCCameraGestureResponder-Protocol.h"
#import "SCFeatureLensSideButton-Protocol.h"
#import "SCFeatureLensSideButtonUpdateListener-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"
#import "SCUnlockablesControllerListener-Protocol.h"

@class NSString, SCCameraOverlayView, SCDisposableObserverLifecycle, SCFeatureReference, SCFeatureSettingsService, SCLazy, SCLens, SCLensSideButton, SCUserSession;
@protocol SCCameraLensSideButtonLogger, SCFeatureLensSideButtonDelegate;

@interface SCFeatureLensSideButtonImpl : SCFeature <SCFeatureLensSideButtonUpdateListener, SCFeatureLensSideButton, SCManagedCapturerListener, SCCameraGestureResponder, SCUnlockablesControllerListener>
{
    SCUserSession *_userSession;
    SCCameraOverlayView *_parentView;
    SCLensSideButton *_lensButton;
    _Bool _lensCarouselOpen;
    double _lensButtonOffscreenY;
    _Bool _hasLoggedShownEvent;
    SCDisposableObserverLifecycle *_vcLifecycle;
    id <SCCameraLensSideButtonLogger> _lensSideButtonLogger;
    SCLazy *_lensUserProvider;
    SCFeatureReference *_featureLensesTooltip;
    SCFeatureSettingsService *_featureSettingsService;
    id <SCFeatureLensSideButtonDelegate> _delegate;
    long long _cameraViewType;
}

@property(nonatomic) long long cameraViewType; // @synthesize cameraViewType=_cameraViewType;
@property(nonatomic) __weak id <SCFeatureLensSideButtonDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)_shouldAnimateLensButton;
- (void)_stopAnimatingLensButton;
- (void)_startAnimatingLensButton;
- (void)_logTapped;
- (void)_logShown;
- (void)_lensButtonPressed:(id)arg1;
- (_Bool)_newLensesAvailableBadgeEnabled;
- (_Bool)_isReplyCamera;
- (_Bool)_isMainCamera;
- (_Bool)_shouldHideLensButton;
- (void)_updateFrame;
- (void)_setNewLensesAvailable:(_Bool)arg1;
- (void)_updateNewLensesAvailableStatus;
- (void)_unsubscribeForNewLensesAvailableUpdates;
- (void)_subscribeForNewLensesAvailableUpdates;
- (void)_prepareLensButton;
- (void)_viewDidDisappear;
- (void)_viewWillAppear;
- (void)lensSideButtonDelegate:(id)arg1 didChangeNewLensesAvailable:(_Bool)arg2;
- (void)managedCapturer:(id)arg1 didChangeState:(id)arg2;
- (void)showNewLensesTooltipIfNeeded;
@property(readonly, nonatomic) SCLens *lens;
- (void)updateLensButtonVisibility:(double)arg1;
- (void)setLensButtonHidden:(_Bool)arg1;
- (void)resetButtonFrame;
- (void)showLensButtonIfNeeded;
- (_Bool)shouldBlockTouchAtPoint:(struct CGPoint)arg1;
- (void)activate;
- (void)configureWithView:(id)arg1;
- (void)dealloc;
- (id)initWithUserSession:(id)arg1 cameraViewType:(long long)arg2 lensUserProvider:(id)arg3 viewControllerLifecycleEvents:(id)arg4 lensSideButtonLogger:(id)arg5 featureLensesTooltip:(id)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

