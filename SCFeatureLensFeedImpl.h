//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCFeature.h"

#import "SCCameraGestureResponder-Protocol.h"
#import "SCFeatureLensExplorerFromCarousel-Protocol.h"
#import "SCFeatureLensExplorerSwipeUpDelegate-Protocol.h"
#import "SCFeatureLensFeed-Protocol.h"
#import "SCImpalaBusinessProfileManagerListener-Protocol.h"
#import "SCLensExplorerButtonDelegate-Protocol.h"
#import "SCLensExplorerButtonLayoutProviderProtocol-Protocol.h"
#import "SCLensExplorerNavigationProviderProtocol-Protocol.h"
#import "SCLensExplorerRouterDelegate-Protocol.h"
#import "SCLensExplorerUnlockFlowDelegate-Protocol.h"
#import "SCTraceEnabled-Protocol.h"

@class NSString, NSUUID, SCARBarItem, SCDisposableObserver, SCDisposableObserverLifecycle, SCFeatureReference, SCLazy, SCLensExplorerRanker, SCReplyParameters, SCUserSession, UIView;
@protocol SCFeatureARBar, SCFeatureCameraUIArbitrator, SCFeatureLensExplorerSwipeUpDelegate, SCFeatureLensFeedDelegate, SCFeatureLensFeedTooltipDelegate, SCLensExplorerStudySettingsProviderProtocol;

@interface SCFeatureLensFeedImpl : SCFeature <SCTraceEnabled, SCLensExplorerRouterDelegate, SCLensExplorerNavigationProviderProtocol, SCImpalaBusinessProfileManagerListener, SCLensExplorerButtonDelegate, SCLensExplorerUnlockFlowDelegate, SCLensExplorerButtonLayoutProviderProtocol, SCFeatureLensFeed, SCCameraGestureResponder, SCFeatureLensExplorerSwipeUpDelegate, SCFeatureLensExplorerFromCarousel>
{
    UIView *_parentView;
    SCLazy *_lensExplorer;
    SCLazy *_lensExplorerButtonController;
    SCLazy *_dependencyProvider;
    SCLazy *_pageTracker;
    SCDisposableObserverLifecycle *_appLifecycle;
    SCDisposableObserver *_lensCarouselObserver;
    SCDisposableObserver *_lensCarouselWillOpenObserver;
    SCDisposableObserver *_lensCarouselSelectedLensObserver;
    SCFeatureReference *_verticalToolbarRef;
    SCFeatureReference *_portraitModeRef;
    SCFeatureReference *_lensCarousel;
    SCLensExplorerRanker *_ranker;
    _Bool _lensCarouselOpen;
    id <SCFeatureARBar> _arBar;
    SCReplyParameters *_replyParameters;
    id <SCFeatureLensFeedDelegate> delegate;
    long long _cameraViewType;
    NSUUID *_uuid;
    id <SCFeatureCameraUIArbitrator> _cameraBottomUIArbitrator;
    id <SCFeatureLensFeedTooltipDelegate> _tooltipDelegate;
    SCUserSession *_userSession;
}

@property(readonly, nonatomic) __weak SCUserSession *userSession; // @synthesize userSession=_userSession;
@property(nonatomic) __weak id <SCFeatureLensFeedTooltipDelegate> tooltipDelegate; // @synthesize tooltipDelegate=_tooltipDelegate;
@property(nonatomic) __weak id <SCFeatureCameraUIArbitrator> cameraBottomUIArbitrator; // @synthesize cameraBottomUIArbitrator=_cameraBottomUIArbitrator;
@property(readonly, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) long long cameraViewType; // @synthesize cameraViewType=_cameraViewType;
@property(nonatomic) __weak id <SCFeatureLensFeedDelegate> delegate; // @synthesize delegate;
- (void).cxx_destruct;
- (void)_updateCarouselStateAfterFeatureActivation;
- (void)_requestCameraBottomUIVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (struct CGSize)sizeForLensExplorerButton:(id)arg1;
- (double)bottomOffsetForLensExlorerButton:(id)arg1;
- (double)offsetXForLensExlorerButton:(id)arg1;
- (void)didPressLensExplorerButton:(id)arg1;
- (void)setCameraUIVisible:(_Bool)arg1 animated:(_Bool)arg2 arbitrator:(id)arg3;
- (void)showLensExplorerFromCarousel;
- (void)lensExplorerSwipeUpFeature:(id)arg1 didReceivePanWithState:(long long)arg2 offset:(double)arg3 velocity:(double)arg4;
- (_Bool)_isCurrentCameraTypeSupported;
- (void)didUpdateSubscribedForBusinessProfileId:(id)arg1 hostAccountUserId:(id)arg2 subscribed:(_Bool)arg3;
- (id)cameraNavigationDelegate;
- (id)navigationDelegate;
- (void)_appDidEnterBackground;
- (void)lensExplorerLensUnlocker:(id)arg1 didRequestToUpdateSelectLensAfterUnlock:(id)arg2;
- (void)lensExplorerLensUnlocker:(id)arg1 didUseLens:(id)arg2;
- (void)lensExplorerRouter:(id)arg1 didRequestToUpdateSelectLensAfterUnlock:(id)arg2;
- (id)lensExplorerRouterReplyParametersForCameraPresenter:(id)arg1;
- (void)lensExplorerRouterDidToggleCamera:(id)arg1;
- (void)lensExplorerRouterDidDismissLensExplorer:(id)arg1;
- (void)lensExplorerRouterBeginDismissingLensExplorer:(id)arg1;
- (void)lensExplorerRouterDidPresentLensExplorer:(id)arg1;
- (void)lensExplorerRouterDidRequestToPresentLensExplorer:(id)arg1 configuration:(id)arg2;
- (_Bool)isEqual:(id)arg1;
- (void)hideOriginalUIForDisplayInARBar:(id)arg1;
- (void)deactivateFromARBar:(id)arg1;
- (void)restoreFromARBar:(id)arg1;
- (void)cancelPrepareForActivationFromARBar:(id)arg1;
- (_Bool)activateFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)prepareForActivationFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
@property(readonly, nonatomic) SCARBarItem *arBarItem;
- (void)_updateFeatureState;
- (void)setReplyParameters:(id)arg1;
@property(readonly, nonatomic) id <SCLensExplorerStudySettingsProviderProtocol> studySettingsProvider;
- (void)showCreatorPageForLensItemCreator:(id)arg1 fromViewController:(id)arg2 sourcePageType:(long long)arg3;
- (void)dismissIfNeeded;
- (void)presentLensFeedFromInfoCardWithViewController:(id)arg1;
- (void)presentLensFeedFromViewController:(id)arg1 entryPoint:(long long)arg2 isInteractiveTransitioning:(_Bool)arg3;
- (void)presentLensFeedFromViewController:(id)arg1 configuration:(id)arg2;
- (void)presentLensFeedFromViewController:(id)arg1;
@property(readonly, nonatomic) __weak id <SCFeatureLensExplorerSwipeUpDelegate> lensExplorerSwipeUpDelegate;
- (id)lensExplorerNavigationProvider;
@property(readonly, nonatomic) _Bool isPresenting;
- (_Bool)shouldBlockTouchAtPoint:(struct CGPoint)arg1;
- (id)ranker;
- (void)activate;
- (void)configureWithView:(id)arg1;
- (id)initWithUserSession:(id)arg1 portraitMode:(id)arg2 verticalToolbar:(id)arg3 lensCarousel:(id)arg4 cameraViewType:(long long)arg5 dependencyProvider:(id)arg6 applicationLifecycleEvents:(id)arg7 pageTracker:(id)arg8;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

