//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCLensDataFetcher-Protocol.h"
#import "SCLensDataFetcherUIStateDelegate-Protocol.h"
#import "SCManagedDatastore-Protocol.h"

@class NSArray, NSString, SCDisposableObserverLifecycle, SCLensDataDiskSpaceTracker, SCLensDataFetcherEventsListenerAnnouncer, SCLensDataFetcherListenerAnnouncer, SCLensDataFetcherUIState, SCLensDownloadOperationFactory, SCLensFetchingRanker, SCLensFetchingThrottler, SCLensURLDataFetcher, SCRequestManager;
@protocol SCLensIconInMemoryCache, SCLensLoadingQueueProtocol, SCLensUIUpdateListener, SCPerforming;

@interface SCLensDataFetcher : NSObject <SCLensDataFetcherUIStateDelegate, SCLensDataFetcher, SCManagedDatastore>
{
    SCLensDataFetcherEventsListenerAnnouncer *_eventsListenerAnnouncer;
    SCLensDataDiskSpaceTracker *_diskSpaceTracker;
    SCLensURLDataFetcher *_urlDataFetcher;
    SCLensDownloadOperationFactory *_operationsFactory;
    SCLensDataFetcherUIState *_lensDataFetcherUIState;
    SCDisposableObserverLifecycle *_queuesDisposableLifecycle;
    id <SCPerforming> _performer;
    id <SCLensIconInMemoryCache> _lensIconInMemoryCache;
    SCLensDataFetcherListenerAnnouncer *_announcer;
    id <SCLensLoadingQueueProtocol> _contentQueue;
    id <SCLensLoadingQueueProtocol> _imageQueue;
    id <SCLensLoadingQueueProtocol> _assetsQueue;
    id <SCLensLoadingQueueProtocol> _filterOverlayImageQueue;
    id <SCLensLoadingQueueProtocol> _warmupQueue;
    NSArray *_allQueues;
    SCRequestManager *_requestManager;
    SCLensFetchingThrottler *_throttler;
    SCLensFetchingRanker *_ranker;
}

+ (unsigned long long)_rankingContextFromUIUpdateContext:(unsigned long long)arg1;
+ (id)_unableToCreateOperationError;
@property(retain, nonatomic) SCLensFetchingRanker *ranker; // @synthesize ranker=_ranker;
@property(retain, nonatomic) SCLensFetchingThrottler *throttler; // @synthesize throttler=_throttler;
@property(retain, nonatomic) SCLensURLDataFetcher *urlDataFetcher; // @synthesize urlDataFetcher=_urlDataFetcher;
@property(retain, nonatomic) SCRequestManager *requestManager; // @synthesize requestManager=_requestManager;
@property(retain, nonatomic) NSArray *allQueues; // @synthesize allQueues=_allQueues;
@property(retain, nonatomic) id <SCLensLoadingQueueProtocol> warmupQueue; // @synthesize warmupQueue=_warmupQueue;
@property(retain, nonatomic) id <SCLensLoadingQueueProtocol> filterOverlayImageQueue; // @synthesize filterOverlayImageQueue=_filterOverlayImageQueue;
@property(retain, nonatomic) id <SCLensLoadingQueueProtocol> assetsQueue; // @synthesize assetsQueue=_assetsQueue;
@property(retain, nonatomic) id <SCLensLoadingQueueProtocol> imageQueue; // @synthesize imageQueue=_imageQueue;
@property(retain, nonatomic) id <SCLensLoadingQueueProtocol> contentQueue; // @synthesize contentQueue=_contentQueue;
@property(retain, nonatomic) SCLensDataFetcherListenerAnnouncer *announcer; // @synthesize announcer=_announcer;
@property(retain, nonatomic) SCLensDownloadOperationFactory *operationsFactory; // @synthesize operationsFactory=_operationsFactory;
@property(readonly, nonatomic) id <SCPerforming> performer; // @synthesize performer=_performer;
- (void).cxx_destruct;
- (id)_scheduleFilterOverlayDownloadingForLens:(id)arg1 requestTiming:(long long)arg2;
- (id)_scheduleIconDownloadingForLens:(id)arg1 requestTiming:(long long)arg2;
- (id)_scheduleContentDownloadingForLens:(id)arg1 requestTiming:(long long)arg2;
- (void)_logCacheParamsWithEvent:(id)arg1;
- (void)_fetchVisibleLensesIfNeeded;
- (id)checkCacheAndScheduleOperationIfNeeded:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
- (id)reportMetrics;
- (void)removeAllUserSessionDataAsync:(id)arg1;
- (void)removeExpiredContentAsync:(id)arg1 reason:(unsigned long long)arg2 dispatchGroup:(id)arg3;
- (void)handleEmergencyDiskConditionWithDispatchGroup:(id)arg1;
- (id)kindName;
- (void)cancelDownloadsAndClearInMemoryCache;
- (void)_didFinishUpdatingVisibleLens;
- (void)_notifyVisibleLensUpdatedEvent;
- (void)didUpdateActiveLensOrder:(id)arg1 withContext:(unsigned long long)arg2;
- (void)didHideLensesWithContext:(unsigned long long)arg1;
- (void)didSelectLens:(id)arg1 withContext:(unsigned long long)arg2;
- (void)didEndDisplayingLens:(id)arg1 withContext:(unsigned long long)arg2;
- (void)willDisplayLens:(id)arg1 withContext:(unsigned long long)arg2;
- (void)applicationDidReceiveMemoryWarning:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
@property(readonly, nonatomic) id <SCLensUIUpdateListener> lensUIStateListener;
- (void)clearCacheWithCompletionBlock:(CDUnknownBlockType)arg1;
- (void)clearCacheFromTweaks;
- (void)clearInMemoryCache;
- (void)removeExpiredData:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)resumeDownloads;
- (void)pauseDownloads;
- (void)cancelDownloads;
- (void)fetchLenses:(id)arg1;
- (void)fetchAsset:(id)arg1 lens:(id)arg2 completionPerformer:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)fetchContentForLens:(id)arg1 requestTiming:(long long)arg2;
- (void)fetchLenses:(id)arg1 requestTiming:(long long)arg2;
- (void)removeEventsListener:(id)arg1;
- (_Bool)addEventsListener:(id)arg1;
- (void)_subscribeToWillStartOperationsObservable;
- (id)initWithDiskSpaceTracker:(id)arg1 urlDataFetcher:(id)arg2 operationsFactory:(id)arg3 lensDataFetcherUIState:(id)arg4 performer:(id)arg5 lensDataFetcherLoadingQueueFactory:(id)arg6 lensIconInMemoryCache:(id)arg7;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

