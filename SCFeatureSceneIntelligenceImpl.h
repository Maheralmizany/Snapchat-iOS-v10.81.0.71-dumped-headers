//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCFeature.h"

#import "SCFeatureSceneIntelligence-Protocol.h"
#import "SCLSIUtilityLensStatePresenterDelegate-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"
#import "SCScanLensSelectionHandlerDelegate-Protocol.h"

@class NSString, NSTimer, NSUUID, SCARBarItem, SCDisposableObserver, SCDisposableObserverLifecycle, SCFeatureReference, SCFeatureSceneIntelligencePrivacyPrompter, SCLazy, SCLensSceneIntelligenceController, SCScanLensMetadataStore, SCScanLensSelectionHandler, SCScopedAccess, UIGestureRecognizer, UIView;
@protocol SCARBarCompatibleFeature, SCCapturer, SCFeatureARBar, SCFeatureScanBar, SCFeatureSceneIntelligenceLensDelegate, SCLensDataFetcher, SCLensMetadataStoreProtocol, SCMainCameraScanDelegate, SCScanLogger;

@interface SCFeatureSceneIntelligenceImpl : SCFeature <SCLSIUtilityLensStatePresenterDelegate, SCManagedCapturerListener, SCScanLensSelectionHandlerDelegate, SCFeatureSceneIntelligence>
{
    id <SCCapturer> _capturer;
    SCLazy *_gtqProvider;
    SCLazy *_locationProvider;
    SCDisposableObserver *_lensSelectionObserver;
    SCDisposableObserver *_lensCarouselObserver;
    SCDisposableObserverLifecycle *_appLifecycle;
    SCLensSceneIntelligenceController *_sceneIntelligenceController;
    SCLazy *_experimentManager;
    SCLazy *_utilityLensesController;
    SCScanLensMetadataStore *_lensMetadataStore;
    SCFeatureSceneIntelligencePrivacyPrompter *_privacyPrompter;
    SCLazy *_sceneIntelligenceLogger;
    SCLazy *_holdTooltipController;
    SCLazy *_fallbackTooltipController;
    SCLazy *_utilityLensPermanentTooltipController;
    SCLazy *_utilityLensScanningTooltipController;
    SCLazy *_utilityLensNoResultTooltipController;
    SCFeatureReference *_lensCarousel;
    SCFeatureReference *_scanCards;
    SCScopedAccess *_scanDataOrchestrator;
    SCDisposableObserverLifecycle *_scanDataObserverLifecycle;
    id <SCScanLogger> _scanLogger;
    NSTimer *_utilityScanTriggerTimer;
    SCFeatureReference *_snapcodeScanner;
    NSTimer *_snapcodeScanTimer;
    NSTimer *_stopShazamTimer;
    SCScanLensSelectionHandler *_selectionHandler;
    id <SCLensMetadataStoreProtocol> _injectedMetadataStore;
    id <SCLensDataFetcher> _lensDataFetcher;
    _Bool _isDisplayingScanningAnimation;
    UIView *_containerView;
    _Bool _isActive;
    _Bool _isPreparing;
    _Bool _isInitial;
    UIGestureRecognizer *_gestureRecognizer;
    id <SCARBarCompatibleFeature> _fallbackFeature;
    id <SCFeatureARBar> _arBar;
    id <SCFeatureScanBar> _scanBar;
    id <SCMainCameraScanDelegate> _mainCameraScanDelegate;
    id <SCFeatureSceneIntelligenceLensDelegate> _lensDelegate;
    NSUUID *_uuid;
}

@property(readonly, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) __weak id <SCFeatureSceneIntelligenceLensDelegate> lensDelegate; // @synthesize lensDelegate=_lensDelegate;
@property(nonatomic) __weak id <SCMainCameraScanDelegate> mainCameraScanDelegate; // @synthesize mainCameraScanDelegate=_mainCameraScanDelegate;
- (void).cxx_destruct;
- (void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToScanImage:(id)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToPreviewResultsForContext:(id)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToShowResultsForContext:(id)arg2;
- (void)utilityLensStatePresenter:(id)arg1 stopScanningForContext:(id)arg2;
- (void)utilityLensStatePresenter:(id)arg1 startScanningForContext:(id)arg2;
- (void)startUtilityLensScanning;
- (void)abortUtilityLensScanning;
- (void)_showResultsForContext:(id)arg1;
- (void)finishScanningAnimationWithSuccess:(_Bool)arg1;
- (void)_startScanningAnimationFromPoint:(struct CGPoint)arg1;
- (void)_triggerShazamWithIsInUtilityLens:(_Bool)arg1;
- (void)_configureDataProvider;
- (void)_activateWithUtilityLensRequest:(id)arg1 point:(struct CGPoint)arg2 scanSource:(long long)arg3 scanBarEnabled:(_Bool)arg4;
- (void)_activateOnlyForActiveUtilityContext:(id)arg1 point:(struct CGPoint)arg2 scanSource:(long long)arg3 gestureRecognizer:(id)arg4;
- (void)_handleSnapcodeScanWithGestureRecognizer:(id)arg1;
- (void)_activateForAllRelevantContextWithARBar:(id)arg1 point:(struct CGPoint)arg2 gestureRecognizer:(id)arg3;
- (void)_analyzeSingleFrameWithUtilityLensRequest:(id)arg1 touchPoint:(struct CGPoint)arg2 scanSource:(long long)arg3 scanBarEnabled:(_Bool)arg4;
- (void)_didReceiveScanDataError:(id)arg1;
- (void)_endObservingScanData;
- (void)_startObservingScanData;
- (id)_createUtilityLensesController;
- (void)_onLensChanged:(id)arg1;
- (void)_configureWithInjectedMetadataStore:(id)arg1;
- (void)handleGesture:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)deactivateFromARBar:(id)arg1;
- (void)restoreFromARBar:(id)arg1;
- (_Bool)activateFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)cancelPrepareForActivationFromARBar:(id)arg1;
- (void)prepareForActivationFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)hideOriginalUIForDisplayInARBar:(id)arg1;
@property(readonly, nonatomic) SCARBarItem *arBarItem;
- (void)injectLensMetadataStore:(id)arg1;
- (id)utilityLensesController;
- (_Bool)isPointInsideSceneIntelligenceUI:(struct CGPoint)arg1;
- (void)resetCurrentUtilityLensResults;
- (void)activate;
- (void)configureWithView:(id)arg1;
- (id)initWithCapturer:(id)arg1 scanDataOrchestrator:(id)arg2 lensDataFetcher:(id)arg3 experimentManager:(id)arg4 gtqProvider:(id)arg5 locationProvider:(id)arg6 privacyPrompter:(id)arg7 sceneIntelligenceLogger:(id)arg8 holdTooltipController:(id)arg9 fallbackTooltipController:(id)arg10 utilityLensPermanentTooltipController:(id)arg11 utilityLensScanningTooltipController:(id)arg12 utilityLensNoResultTooltipController:(id)arg13 fallbackFeature:(id)arg14 scanBar:(id)arg15 scanCards:(id)arg16 snapcodeScanner:(id)arg17 lensCarousel:(id)arg18;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

