//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCoding-Protocol.h"
#import "SCLocationDataControllerDelegate-Protocol.h"
#import "SCLocationDataFetcherDelegate-Protocol.h"
#import "SCLocationObserver-Protocol.h"
#import "SCTraceEnabled-Protocol.h"
#import "SCUserSessionScoped-Protocol.h"

@class CLLocation, NSDate, NSMutableDictionary, NSMutableSet, NSString, SCLocationDataFetcher, SCLocationManager, SCLocationServicesListenerAnnouncer, SCLocationWeatherController, SCUserSession;

@interface SCLocationServicesDataStore : NSObject <NSCoding, SCLocationDataFetcherDelegate, SCLocationDataControllerDelegate, SCTraceEnabled, SCLocationObserver, SCUserSessionScoped>
{
    CLLocation *_lastFetchLocation;
    _Bool _isDebouncing;
    SCUserSession *_userSession;
    _Bool _forceUseNextLocation;
    _Bool _fetchingLocationData;
    long long _state;
    long long _requestContext;
    SCLocationManager *_locationManager;
    SCLocationDataFetcher *_locationDataFetcher;
    SCLocationWeatherController *_weatherController;
    SCLocationServicesListenerAnnouncer *_locationServicesAnnouncer;
    NSMutableDictionary *_datastore;
    CLLocation *_location;
    CLLocation *_dataLocation;
    NSDate *_lastIpRequestTime;
    NSDate *_updateUntil;
    NSMutableSet *_updateLocationCallers;
}

+ (_Bool)_isRecentValidLocation:(id)arg1;
+ (_Bool)_legacyShouldFetchLocDataForNewLocation:(id)arg1 comparedToOldLocation:(id)arg2;
+ (_Bool)_shouldUseNewLocation:(id)arg1 oldLocation:(id)arg2;
+ (id)stringWithLocationDataState:(long long)arg1;
+ (void)removeSavedState;
+ (id)path;
@property(retain) NSMutableSet *updateLocationCallers; // @synthesize updateLocationCallers=_updateLocationCallers;
@property(retain, nonatomic) NSDate *updateUntil; // @synthesize updateUntil=_updateUntil;
@property(retain, nonatomic) NSDate *lastIpRequestTime; // @synthesize lastIpRequestTime=_lastIpRequestTime;
@property(retain, nonatomic) CLLocation *dataLocation; // @synthesize dataLocation=_dataLocation;
@property(retain, nonatomic) CLLocation *location; // @synthesize location=_location;
@property(nonatomic) _Bool fetchingLocationData; // @synthesize fetchingLocationData=_fetchingLocationData;
@property(retain, nonatomic) NSMutableDictionary *datastore; // @synthesize datastore=_datastore;
@property(retain, nonatomic) SCLocationServicesListenerAnnouncer *locationServicesAnnouncer; // @synthesize locationServicesAnnouncer=_locationServicesAnnouncer;
@property(retain, nonatomic) SCLocationWeatherController *weatherController; // @synthesize weatherController=_weatherController;
@property(retain, nonatomic) SCLocationDataFetcher *locationDataFetcher; // @synthesize locationDataFetcher=_locationDataFetcher;
@property(retain, nonatomic) SCLocationManager *locationManager; // @synthesize locationManager=_locationManager;
@property(nonatomic) long long requestContext; // @synthesize requestContext=_requestContext;
@property(readonly, nonatomic) long long state; // @synthesize state=_state;
- (void).cxx_destruct;
- (void)invalidate;
- (void)fetchDataForLocation:(id)arg1 context:(long long)arg2 trigger:(long long)arg3;
- (void)debounceFetchDataWithLatestLocation:(id)arg1 context:(long long)arg2 trigger:(long long)arg3;
- (void)onLocationError:(id)arg1;
- (void)_onLocationAltitudeChange:(double)arg1;
- (void)_onLocationSpeedChange:(double)arg1;
- (void)onLocationUpdate:(id)arg1;
- (double)locationObserverDesiredAccuracy;
- (id)locationObserverIdentifier;
- (id)locationObserverDispatchQueue;
- (_Bool)locationObserverWantsActiveLocationMonitoring;
- (void)_stopUpdatingLocationDataIfNecessary;
- (id)userSession;
- (void)locationDataController:(id)arg1 didUpdateData:(id)arg2 forKey:(id)arg3;
- (void)locationDataFetcherFailedToFetchLocationDataWithError:(id)arg1;
- (_Bool)shouldProcessResponseWithNewLocation:(id)arg1 oldLocation:(id)arg2;
- (void)locationDataFetcherFetchedLocationData:(id)arg1 forLocation:(id)arg2;
- (void)_setObject:(id)arg1 forKey:(id)arg2;
- (void)_setState:(long long)arg1;
- (id)objectForKey:(id)arg1;
- (void)_fetchIpBasedLocationDataWithContext:(long long)arg1;
- (void)_prepareLocationDataUpdate;
- (void)_startUpdatingLocationDataWithLocationServices:(_Bool)arg1 context:(long long)arg2 caller:(id)arg3;
- (void)_startUpdatingLocationDataWithAuthorization:(_Bool)arg1 context:(long long)arg2 caller:(id)arg3;
- (double)currentLocationDataAccuracy;
- (void)_didStopLocationUpdating;
- (void)_didStartLocationUpdatingWithCaller:(id)arg1;
- (void)stopUpdatingLocation;
- (void)stopUpdatingLocationData;
- (void)startUpdatingLocationDataWithContext:(long long)arg1 caller:(id)arg2;
- (void)startUpdatingLocationServicesIfNecessaryWithContext:(long long)arg1 caller:(id)arg2;
- (void)updateLocationDataOnceWithLocationServices:(_Bool)arg1 context:(long long)arg2 caller:(id)arg3;
- (void)updateLocationDataOnceWithContext:(long long)arg1 caller:(id)arg2;
- (void)_setUserSessionIfValid:(id)arg1;
- (void)_ensureNonNilObjects;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
- (void)clear;
- (void)saveState;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

