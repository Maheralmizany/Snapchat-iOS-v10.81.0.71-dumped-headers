//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCFeatureLensSideButtonUpdateProviderImplementation-Protocol.h"
#import "SCLensDataProviderListener-Protocol.h"
#import "SCLensDataProviderRegistryUpdateListener-Protocol.h"
#import "SCLensUsageTrackerListener-Protocol.h"

@class NSArray, NSMapTable, NSSet, NSString, SCFeatureLensSideButtonUpdateListenerAnnouncer, SCLens, SCPreferences, SCQueuePerformer;
@protocol SCFeatureLensSideButtonDelegate, SCLensCameraScreenDataProviderProtocol, SCLensDataProviderRegistryUpdatable, SCLensUsageTrackerProtocol, SCObserving;

@interface SCFeatureLensSideButtonUpdateInteractiveProvider : NSObject <SCLensDataProviderRegistryUpdateListener, SCLensUsageTrackerListener, SCLensDataProviderListener, SCFeatureLensSideButtonUpdateProviderImplementation>
{
    SCFeatureLensSideButtonUpdateListenerAnnouncer *_announcer;
    SCQueuePerformer *_performer;
    id <SCLensDataProviderRegistryUpdatable> _registry;
    id <SCFeatureLensSideButtonDelegate> _lensSideButtonDelegate;
    id <SCLensCameraScreenDataProviderProtocol> _lensDataProvider;
    id <SCLensUsageTrackerProtocol> _lensUsageTracker;
    SCPreferences *_lensPreferences;
    NSArray *_lenses;
    // Error parsing type: {atomic<long>="__a_"Aq}, name: _lensesCount
    _Bool _lensesOn;
    long long _cameraViewType;
    NSSet *_usedLensIds;
    NSArray *_seenLensIds;
    NSMapTable *_lensDataProviderTokens;
    id <SCObserving> _preferencesSubscription;
    _Bool _newLensesAvailable;
}

@property(readonly, nonatomic) _Bool newLensesAvailable; // @synthesize newLensesAvailable=_newLensesAvailable;
- (void).cxx_destruct;
- (void)_stopAllLensDataProviderUpdates;
- (_Bool)_isLensDataProviderUpdating:(id)arg1;
- (void)notifyNewLensesAvailableWithDelegate:(id)arg1 newLensesAvailable:(_Bool)arg2;
- (void)updateNewLensesAvailable;
- (void)stopUpdatingLensDataWithProvider:(id)arg1 lensDataProviderToken:(id)arg2;
- (void)startUpdatingLensDataWithProvider:(id)arg1;
- (void)scheduleUpdatingLensDataIfNecessary;
- (void)unsubscribeListeners;
- (void)subscribeListeners;
- (void)reloadDataSources;
- (void)lensDataProviderRegistry:(id)arg1 didUpdateLensDataProvider:(id)arg2 cameraViewType:(long long)arg3;
- (void)usageTracker:(id)arg1 didUpdateUsedLensIds:(id)arg2;
- (void)lensDataProvider:(id)arg1 didUpdateLens:(id)arg2 contentUpdateType:(long long)arg3;
- (void)lensDataProvider:(id)arg1 didUpdateAllLenses:(id)arg2 requiresAnimation:(_Bool)arg3;
@property(readonly, nonatomic) SCLens *firstApplicableLens;
- (void)removeListener:(id)arg1;
- (_Bool)addListener:(id)arg1;
- (void)lensesTurnedOff;
- (void)lensesTurnedOn;
- (void)setLensDataProvider:(id)arg1;
- (void)setCameraViewType:(long long)arg1;
- (void)setUsedLensIds:(id)arg1;
- (void)setSeenLensIds:(id)arg1;
- (void)dealloc;
- (id)initWithRegistry:(id)arg1 lensSideButtonDelegate:(id)arg2 userSession:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

