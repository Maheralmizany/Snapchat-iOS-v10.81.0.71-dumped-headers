//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, SCQueuePerformer, SCStickerMetadataCache;
@protocol OS_dispatch_queue, SCStickerPackMetadataDownloadStrategy, SCStickerPackMetadataThrottleInfo;

@interface SCStickerPackMetadataLoader : NSObject
{
    SCQueuePerformer *_subscriptionPerformer;
    SCStickerMetadataCache *_metadataCache;
    NSObject<OS_dispatch_queue> *_processingQueue;
    id <SCStickerPackMetadataDownloadStrategy> _defaultDownloadStrategy;
    id <SCStickerPackMetadataThrottleInfo> _throttleInfo;
    NSMutableDictionary *_subscriptions;
    NSMutableDictionary *_uniqueDownloadStrategies;
}

@property(readonly, nonatomic) NSMutableDictionary *uniqueDownloadStrategies; // @synthesize uniqueDownloadStrategies=_uniqueDownloadStrategies;
@property(readonly, nonatomic) NSMutableDictionary *subscriptions; // @synthesize subscriptions=_subscriptions;
@property(readonly, nonatomic) id <SCStickerPackMetadataThrottleInfo> throttleInfo; // @synthesize throttleInfo=_throttleInfo;
@property(readonly, nonatomic) id <SCStickerPackMetadataDownloadStrategy> defaultDownloadStrategy; // @synthesize defaultDownloadStrategy=_defaultDownloadStrategy;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *processingQueue; // @synthesize processingQueue=_processingQueue;
@property(readonly, nonatomic) SCStickerMetadataCache *metadataCache; // @synthesize metadataCache=_metadataCache;
@property(readonly, nonatomic) SCQueuePerformer *subscriptionPerformer; // @synthesize subscriptionPerformer=_subscriptionPerformer;
- (void).cxx_destruct;
- (void)_cacheData:(id)arg1 syncToken:(id)arg2 forPackID:(id)arg3;
- (void)_downloadMetadataForPack:(id)arg1 syncToken:(id)arg2 existingMetadata:(id)arg3 sourceKey:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)_fetchMetadataForPack:(id)arg1 sourceKey:(id)arg2 updateTest:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_checkMetadataForPack:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_packMetadataListForPackList:(id)arg1 updateTest:(CDUnknownBlockType)arg2 sourceKey:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_hasAtLeastOneCachedPackForPackList:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_packMetadataListForKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_notifySubscribers:(id)arg1 forKey:(id)arg2 packList:(id)arg3;
- (void)_notifyAllSubscribersForKey:(id)arg1 packList:(id)arg2;
- (void)_updateAndNotifySubscriber:(id)arg1 forKey:(id)arg2;
- (_Bool)_isCachedPackList:(id)arg1 theSameAsUpdateList:(id)arg2;
- (void)_updateMetadataIfNotThrottledForStickerPacks:(id)arg1 cachedPackList:(id)arg2 cacheLastUpdated:(id)arg3 source:(id)arg4 shouldRespectThrottle:(_Bool)arg5;
- (id)_addSubscription:(id)arg1;
- (id)_downloadStrategyForSourceKey:(id)arg1;
- (void)registerUniqueDownloadStrategy:(id)arg1 forSourceKey:(id)arg2;
- (void)hasCachedPackListForKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updateFromStickerPacks:(id)arg1 forKey:(id)arg2 shouldRespectThrottle:(_Bool)arg3;
- (void)unsubscribe:(id)arg1;
- (id)subscribe:(id)arg1 onQueue:(id)arg2 forKey:(id)arg3;
- (id)initWithMetadataCache:(id)arg1 defaultDownloadStrategy:(id)arg2 throttleInfo:(id)arg3 processingQueue:(id)arg4 subscriptionPerformer:(id)arg5;
- (id)initWithMetadataCache:(id)arg1 defaultDownloadStrategy:(id)arg2 throttleInfo:(id)arg3;

@end

